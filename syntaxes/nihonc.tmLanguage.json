{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "NihonC",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		}
		,
		{
			"include": "#types"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.nihonc",
				"match": "\\b(if|while|for|return|から|まで)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.nihonc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.nihonc",
					"match": "\\\\."
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.nihonc",
					"match": "\\b(int|float|char|double|void|long|short|unsigned|signed|bool)\\b"
				},
				{
					"name": "storage.type.nihonc",
					"match": "\\b(イント|フロート|チャル|ダブル|void|ロング)\\b"
				},
				{
					"name": "storage.modifier.nihonc",
					"match": "\\b(const|static|extern|register|auto|volatile|inline|restrict)\\b"
				},
				{
					"name": "entity.name.function.pointer.nihonc",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(\\s*\\*?\\s*\\)"
				},
				{
					"name": "storage.type.typedef.nihonc",
					"match": "\\btypedef\\b"
				},
				{
					"name": "keyword.control.union.nihonc",
					"match": "\\b(union)\\b"
				},
				{
					"name": "entity.name.union.nihonc",
					"match": "\\b(union\\s+[A-Za-z_][A-Za-z0-9_]*\\s*\\{[^\\}]*\\})\\b"
				},
				{
					"name": "keyword.control.struct.nihonc",
					"match": "\\b(struct)\\b"
				},
				{
					"name": "entity.name.struct.nihonc",
					"match": "\\b(struct\\s+[A-Za-z_][A-Za-z0-9_]*\\s*\\{[^\\}]*\\})\\b"
				},
				{
					"name": "keyword.control.enum.nihonc",
					"match": "\\b(enum)\\b"
				},
				{
					"name": "variable.other.enum-value.nihonc",
					"match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\b"
				},
				{
					"name": "storage.type.pointer.nihonc",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*\\*)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.nihonc",
					"begin": "//",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.comment.nihonc" }
					},
					"end": "$",
					"patterns": []
				},
				{
					"name": "comment.block.nihonc",
					"begin": "/\\*",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.comment.nihonc" }
					},
					"end": "\\*/",
					"endCaptures": {
						"0": { "name": "punctuation.definition.comment.nihonc" }
					},
					"patterns": []
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.nihonc",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.nihonc",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
				}
			]
		},
		"preprocessor": {
			"patterns": [
				{
					"name": "meta.preprocessor.include.nihonc",
					"begin": "#\\s*include\\s*",
					"beginCaptures": {
						"0": { "name": "keyword.control.include.nihonc" }
					},
					"end": "(?=$|\\n)",
					"patterns": [
						{
							"name": "string.quoted.double.include.nihonc",
							"match": "\"[^\"]+\""
						},
						{
							"name": "string.quoted.angle.include.nihonc",
							"match": "<[^>]+>"
						}
					]
				},
				{
					"name": "meta.preprocessor.directive.nihonc",
					"match": "#\\s*(define|pragma|undef|ifdef|ifndef|endif|if|else|elif|error|warning)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.nihonc",
					"match": "\\+|\\-|\\*|\\/|%"
				},
				{
					"name": "keyword.operator.assignment.nihonc",
					"match": "=|\\+=|\\-=|\\*=|\\/=|%="
				},
				{
					"name": "keyword.operator.comparison.nihonc",
					"match": "==|!=|<|>|<=|>="
				},
				{
					"name": "keyword.operator.logical.nihonc",
					"match": "&&|\\|\\||!"
				},
				{
					"name": "keyword.operator.bitwise.nihonc",
					"match": "\\&|\\||\\^|~|<<|>>"
				},
				{
					"name": "keyword.operator.increment-decrement.nihonc",
					"match": "\\+\\+|--"
				},
				{
					"name": "keyword.operator.ternary.nihonc",
					"match": "\\?|:"
				},
				{
					"name": "keyword.operator.pointer.nihonc",
					"match": "\\*|&"
				},
				{
					"name": "keyword.operator.member-access.nihonc",
					"match": "\\.|->"
				},
				{
					"name": "keyword.operator.sizeof.nihonc",
					"match": "sizeof"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.nihonc",
					"match": "\\b([+-]?\\d+)\\b"
				},
				{
					"name": "constant.numeric.hex.nihonc",
					"match": "\\b0x[0-9A-Fa-f]+\\b"
				},
				{
					"name": "constant.numeric.float.nihonc",
					"match": "\\b([+-]?\\d*\\.\\d+([eE][+-]?\\d+)?)\\b"
				}
			]
		}
	},
	"scopeName": "source.nihonc"
}